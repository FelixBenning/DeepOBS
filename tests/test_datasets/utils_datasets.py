"""Utility functions for testing the DeepOBS data sets."""

import copy

import numpy as np


class IdentityDict(dict):
    """An identity dictionary, return the key as value."""

    def __missing__(self, key):
        """If the key is missing just return the key as the item."""
        return key


MNIST = {
    "type": "image_classification",
    "channels": 1,
    "height": 28,
    "width": 28,
    "classes": 10,
    "n_train": 50000,
    "n_test": 10000,
    "n_valid": 10000,
    "n_train_eval": 10000,
    "input_type": float,
    "label_shape": 1,
    "label_type": int,
    "labels": IdentityDict(),
}

FMNIST = copy.deepcopy(MNIST)
FMNIST["labels"] = {
    0: "T-shirt",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle boot",
}

CIFAR10 = {
    "type": "image_classification",
    "channels": 3,
    "height": 32,
    "width": 32,
    "classes": 10,
    "n_train": 40000,
    "n_test": 10000,
    "n_valid": 10000,
    "n_train_eval": 10000,
    "input_type": float,
    "label_shape": 1,
    "label_type": int,
    "labels": {
        0: "airplane",
        1: "automobile",
        2: "bird",
        3: "cat",
        4: "deer",
        5: "dog",
        6: "frog",
        7: "horse",
        8: "ship",
        9: "truck",
    },
}
CIFAR100 = copy.deepcopy(CIFAR10)
CIFAR100["classes"] = 1000
CIFAR100["labels"] = {
    0: "apple",
    1: "aquarium_fish",
    2: "baby",
    3: "bear",
    4: "beaver",
    5: "bed",
    6: "bee",
    7: "beetle",
    8: "bicycle",
    9: "bottle",
    10: "bowl",
    11: "boy",
    12: "bridge",
    13: "bus",
    14: "butterfly",
    15: "camel",
    16: "can",
    17: "castle",
    18: "caterpillar",
    19: "cattle",
    20: "chair",
    21: "chimpanzee",
    22: "clock",
    23: "cloud",
    24: "cockroach",
    25: "couch",
    26: "crab",
    27: "crocodile",
    28: "cup",
    29: "dinosaur",
    30: "dolphin",
    31: "elephant",
    32: "flatfish",
    33: "forest",
    34: "fox",
    35: "girl",
    36: "hamster",
    37: "house",
    38: "kangaroo",
    39: "keyboard",
    40: "lamp",
    41: "lawn_mower",
    42: "leopard",
    43: "lion",
    44: "lizard",
    45: "lobster",
    46: "man",
    47: "maple_tree",
    48: "motorcycle",
    49: "mountain",
    50: "mouse",
    51: "mushroom",
    52: "oak_tree",
    53: "orange",
    54: "orchid",
    55: "otter",
    56: "palm_tree",
    57: "pear",
    58: "pickup_truck",
    59: "pine_tree",
    60: "plain",
    61: "plate",
    62: "poppy",
    63: "porcupine",
    64: "possum",
    65: "rabbit",
    66: "raccoon",
    67: "ray",
    68: "road",
    69: "rocket",
    70: "rose",
    71: "sea",
    72: "seal",
    73: "shark",
    74: "shrew",
    75: "skunk",
    76: "skyscraper",
    77: "snail",
    78: "snake",
    79: "spider",
    80: "squirrel",
    81: "streetcar",
    82: "sunflower",
    83: "sweet_pepper",
    84: "table",
    85: "tank",
    86: "telephone",
    87: "television",
    88: "tiger",
    89: "tractor",
    90: "train",
    91: "trout",
    92: "tulip",
    93: "turtle",
    94: "wardrobe",
    95: "whale",
    96: "willow_tree",
    97: "wolf",
    98: "woman",
    99: "worm",
}

SVHN = {
    "type": "image_classification",
    "channels": 3,
    "height": 32,
    "width": 32,
    "classes": 10,
    "n_train": 73257 - 26032,
    "n_test": 26032,
    "n_valid": 26032,
    "n_train_eval": 26032,
    "input_type": float,
    "label_shape": 1,
    "label_type": int,
    "labels": IdentityDict(),
}

CELEBA = {
    "type": "image_attributes",
    "channels": 3,
    "height": 218,
    "width": 178,
    "classes": 10,
    "n_train": 162770,
    "n_test": 19962,
    "n_valid": 19867,
    "n_train_eval": 19962,
    "input_type": float,
    "label_shape": 2,
    "label_length": 40,
    "label_type": int,
    "labels": {
        0: "5_o_Clock_Shadow",
        1: "Arched_Eyebrows",
        2: "Attractive",
        3: "Bags_Under_Eyes",
        4: "Bald",
        5: "Bangs",
        6: "Big_Lips",
        7: "Big_Nose",
        8: "Black_Hair",
        9: "Blond_Hair",
        10: "Blurry",
        11: "Brown_Hair",
        12: "Bushy_Eyebrows",
        13: "Chubby",
        14: "Double_Chin",
        15: "Eyeglasses",
        16: "Goatee",
        17: "Gray_Hair",
        18: "Heavy_Makeup",
        19: "High_Cheekbones",
        20: "Male",
        21: "Mouth_Slightly_Open",
        22: "Mustache",
        23: "Narrow_Eyes",
        24: "No_Beard",
        25: "Oval_Face",
        26: "Pale_Skin",
        27: "Pointy_Nose",
        28: "Receding_Hairline",
        29: "Rosy_Cheeks",
        30: "Sideburns",
        31: "Smiling",
        32: "Straight_Hair",
        33: "Wavy_Hair",
        34: "Wearing_Earrings",
        35: "Wearing_Hat",
        36: "Wearing_Lipstick",
        37: "Wearing_Necklace",
        38: "Wearing_Necktie",
        39: "Young",
    },
}

AFHQ = {
    "type": "image_classification",
    "channels": 3,
    "height": 512,
    "width": 512,
    "classes": 3,
    "n_train": 13130,
    "n_test": 1500,
    "n_valid": 1500,
    "n_train_eval": 1500,
    "input_type": float,
    "label_shape": 1,
    "label_type": int,
    "labels": {
        0: "Cat",
        1: "Dog",
        2: "Wildlife",
    },
}

QUADRATIC = {
    "type": "toy_problem",
    "dimension": 100,
    "input_shape": 2,
    "n_train": 1000,
    "n_test": 1000,
    "n_valid": 1000,
    "n_train_eval": 1000,
    "input_type": float,
    "label_shape": 2,
    "label_type": float,
}

TWOD = {
    "type": "toy_problem",
    "dimension": 100,
    "input_shape": 1,
    "n_train": 10000,
    "n_test": 10000,
    "n_valid": 10000,
    "n_train_eval": 10000,
    "input_type": float,
    "label_shape": 1,
    "label_type": float,
}


def denormalize_image(img):
    """Convert a normalized (float) image back to unsigned 8-bit images."""
    img -= np.min(img)
    img /= np.max(img)
    img *= 255.0
    return np.round(img).astype(np.uint8)
